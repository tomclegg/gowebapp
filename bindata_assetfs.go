// Code generated by go-bindata.
// sources:
// bindata.tmp/index.html
// bindata.tmp/js.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTmpIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x4c\xc9\x4f\x2e\xa9\x2c\x48\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x36\x19\xa9\x89\x29\x60\x86\x3e\x9c\x95\x94\x9f\x52\x09\x11\x82\xb3\x8a\x93\x8b\x32\x0b\x4a\x14\x8a\x8b\x92\x6d\x95\xb2\x8a\xf5\xb2\x8a\x95\xec\x6c\xf4\x21\x82\x76\x5c\x36\xfa\x10\xd3\x00\x01\x00\x00\xff\xff\xa2\x91\x5b\x3f\x65\x00\x00\x00")

func bindataTmpIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTmpIndexHtml,
		"bindata.tmp/index.html",
	)
}

func bindataTmpIndexHtml() (*asset, error) {
	bytes, err := bindataTmpIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.tmp/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataTmpJsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xc1\x6e\x9c\x30\x10\x3d\xc3\x57\x3c\xe5\x04\x51\xb4\x4e\xaa\x9e\x76\xc5\xa5\x55\x2b\x55\x6a\x2f\x55\x6f\x51\x84\xbc\xc6\xdb\x75\xe3\xb5\x5d\x30\xcd\x56\x2b\xfe\xbd\x62\xb1\xc1\x60\x94\x1c\xca\x05\xc9\x33\xf3\xe6\xcd\x9b\x67\x93\xdb\xeb\x47\x90\x1d\x5a\xc5\xac\xd0\x2a\x3b\xe9\xaa\x95\xbc\xc9\x71\x01\x21\x78\xe1\x7b\x43\xd9\xf3\x07\xad\x6d\x63\x6b\x6a\xd2\xb1\x22\x21\x04\x3f\x8e\x1c\x43\x3e\x18\x65\x47\x1e\x44\xff\xd0\x1a\x42\x35\x96\x4a\xc9\xab\x6f\x03\x26\x0a\x5c\xba\x5d\x1a\x63\xd4\xfc\x77\x2b\x6a\x0e\x4f\x22\xc8\xf0\x47\x28\x4b\xc7\xa5\x74\xd9\x65\xe9\xb8\x7e\xa9\x72\x5c\x42\xd4\x1e\xf6\xe3\x91\xb3\x67\x88\x83\xe7\x27\x1a\x08\x15\xb1\x4c\xc4\x21\x5b\xb2\x7c\xf4\xa8\x4f\x79\x98\x99\xd4\xdc\xb6\xb5\x8a\x86\x9a\xd2\x37\xfc\x6c\x74\x6d\x9b\x5d\xc4\xa5\xe6\xd4\x72\x50\x28\xfe\xe2\xf9\x64\x54\x55\x30\xad\x85\xb0\x10\xca\x6a\xd8\xa3\x13\x71\xd6\xb5\x97\xd1\x55\x14\xaf\xb4\xee\x95\x9d\x91\x75\x54\xb6\xb8\x74\x77\xb3\x80\xa8\xb6\xf0\x65\xf3\x88\xd4\xb4\xe2\xd5\x16\x07\x2a\x9b\x99\x46\x5d\x34\xd0\xa7\x33\x67\xad\xe5\x57\xce\x8e\xdd\xca\xea\x92\x53\xa4\x10\xa3\x52\xba\xad\x79\xb5\xee\x1c\x82\xff\x4f\xe7\x2b\x1b\xcf\x23\x2a\x9f\x25\xfd\x19\xf2\xa0\x0d\x86\x41\x62\x22\x9b\x21\x80\x02\xb6\x6e\x79\x84\xf4\x7d\xd8\x6f\x8f\xe5\x28\x40\x1f\x02\xe8\x30\xdd\x79\x61\xce\x78\x17\x64\x74\xe9\xc2\xe6\x7d\x4e\x13\x2a\xd6\x40\xef\x7f\x71\x66\x91\x4d\x73\xba\x48\x59\x86\x1e\x58\x91\x61\x73\x42\xe1\x61\x96\xf7\x29\x6a\x14\x99\x7e\x0d\x90\xad\xd8\x6b\x89\x3c\xd5\x99\x76\x2f\x05\x2b\x0d\xb5\xc7\xb2\x7c\x03\xd9\xa0\xc0\xcd\xcd\x12\xeb\xab\xa6\x15\xb8\xb2\xf5\xdf\x71\x71\xaa\x82\x93\xd5\xe9\x19\x54\xb8\xc0\xda\x1b\x70\x9f\x07\xba\x77\xa3\x70\xff\xff\x91\x09\x36\x7b\x4c\xc9\x2d\xee\xe1\xce\x08\x16\xaf\xe5\x1d\x5e\x35\x6d\xff\x3a\xf5\x43\x53\x63\xa4\x60\xf4\xfa\x9c\x0d\xb3\x1b\x2d\x94\x4d\xd7\x74\xcb\x1e\x72\x67\x21\x82\xeb\x15\xc6\xc3\xdb\xed\xc7\x4e\xfc\x4c\x4f\x46\xf2\x34\x99\x3b\x14\xc5\x58\xea\x53\xb2\xbe\x26\x01\xe0\xc5\x7f\xff\x2e\x1d\xdd\x4b\xd0\x4d\x22\x3c\xe5\xbb\x7f\x01\x00\x00\xff\xff\xd2\xfa\xc4\xc4\x2f\x06\x00\x00")

func bindataTmpJsJsBytes() ([]byte, error) {
	return bindataRead(
		_bindataTmpJsJs,
		"bindata.tmp/js.js",
	)
}

func bindataTmpJsJs() (*asset, error) {
	bytes, err := bindataTmpJsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.tmp/js.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.tmp/index.html": bindataTmpIndexHtml,
	"bindata.tmp/js.js": bindataTmpJsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.tmp": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{bindataTmpIndexHtml, map[string]*bintree{}},
		"js.js": &bintree{bindataTmpJsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
