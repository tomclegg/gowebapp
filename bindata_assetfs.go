// Code generated by go-bindata.
// sources:
// bindata.tmp/index.html
// bindata.tmp/js.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTmpIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x4c\xc9\x4f\x2e\xa9\x2c\x48\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x36\x19\xa9\x89\x29\x60\x86\x3e\x9c\x95\x94\x9f\x52\x09\x11\x82\xb3\x8a\x93\x8b\x32\x0b\x4a\x14\x8a\x8b\x92\x6d\x95\xb2\x8a\xf5\xb2\x8a\x95\xec\x6c\xf4\x21\x82\x76\x5c\x36\xfa\x10\xd3\x00\x01\x00\x00\xff\xff\xa2\x91\x5b\x3f\x65\x00\x00\x00")

func bindataTmpIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTmpIndexHtml,
		"bindata.tmp/index.html",
	)
}

func bindataTmpIndexHtml() (*asset, error) {
	bytes, err := bindataTmpIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.tmp/index.html", size: 101, mode: os.FileMode(420), modTime: time.Unix(1484610120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataTmpJsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xc1\x8a\xdb\x30\x10\x3d\x27\x5f\xf1\xd8\x93\xbd\x84\x78\xf7\x9a\x90\x4b\x4b\x0b\x85\xf6\x52\x7a\x5b\x16\xa1\xc8\x93\x46\x5d\x45\x52\x65\xb9\x9b\x12\xfc\xef\xc5\xb1\x1c\xcb\x96\xd9\x3d\xd4\x17\x83\xe6\xcd\x9b\x37\x6f\x46\x2a\xee\xaf\x5f\x81\xec\x50\x6b\xe1\xa5\xd1\xd9\xc9\x94\xb5\xa2\x2a\xc7\x05\x45\x81\x57\xda\x5b\x2e\x5e\x3e\x18\xe3\x2b\xef\xb8\x5d\xde\x32\x16\x45\x81\x1f\x47\x42\x87\x87\xe0\xe2\x48\x51\xf4\x0f\x77\x90\xba\xf2\x5c\x29\x2a\xbf\x75\x9c\xd8\xe1\xd2\x6c\x97\x29\x87\xa3\xdf\xb5\x74\x84\x5e\x44\x84\xe8\x8f\xc0\x58\xd0\xc2\x02\x9a\xb1\xa0\xf5\x4b\x99\xe3\x12\xb3\xb6\xb4\x1f\x8f\x24\x5e\x20\x0f\xbd\x3e\x59\x41\xea\x44\xe5\x42\x1e\xb2\xa9\xca\xa7\x9e\xf5\x39\x8f\x91\x0b\x47\xbe\x76\x3a\x69\x6a\x80\xaf\xe9\x6c\x8d\xf3\xd5\x36\xd1\xe2\x88\x7b\x02\x87\xa6\xd7\x5e\x4f\xc6\x75\x09\x5b\x7b\x48\x0f\xa9\xbd\x81\x3f\x06\x13\x47\x55\x5b\x1b\x43\xc6\xee\x8d\xd2\xad\xb3\x23\xb1\x41\xca\x06\x97\x66\x35\x0a\xc8\x72\x83\x3e\x6d\x1c\x51\x86\x97\x54\x6e\x70\xe0\xaa\x1a\x79\xd4\x24\x0d\x7d\x3a\x93\xa8\x3d\x5d\x35\x07\x75\x33\xa3\x5b\x9c\x12\x87\x04\x57\x2a\x4c\xad\x77\x6b\x15\x18\xfa\xff\x70\x3e\x33\xf1\x3c\x91\xf2\x59\xf1\x9f\xb1\x0e\x5e\xa1\x6b\x24\x15\xb2\xee\x02\xd8\xc1\xbb\x9a\x12\xa6\xef\xdd\x7c\x5b\xae\x20\x01\xe6\x10\x51\xc7\xf0\xb0\x0b\x63\xc5\xdb\x08\xd1\x2c\x27\x6b\xde\x62\xaa\xd8\xb1\x0a\x66\xff\x8b\x84\x47\x36\xf4\x19\x22\x8c\xc5\x3b\x30\x63\xc3\xfa\x84\x5d\x4f\x33\xbd\x4f\x49\xa1\x64\xe9\xe7\x08\xc5\xcc\x7a\x4d\x99\x87\x3c\x5b\xef\x95\x14\xcc\x72\x7f\x64\xec\x1d\x66\x8b\x1d\xee\xee\xa6\x5c\x5f\x0d\x2f\x41\xda\xbb\xbf\xb7\xc1\xe9\x12\xc1\xd6\xe0\x67\x94\x11\x02\x73\x6f\xc0\x43\x1e\xf9\xde\xdc\x8c\xfb\xff\xaf\x18\x68\xb3\xa7\x65\x71\x8f\x07\x84\xb3\x02\x93\xd7\x72\x85\x37\x97\xb6\x7d\x9d\xda\xa6\xb9\xb5\x4a\x0a\x7e\x7d\xce\xba\xde\xad\x91\xda\x2f\xe7\x7c\xcb\x1e\xf3\xb0\x42\x05\xae\x57\x18\x8f\xef\x97\xbf\x55\xa2\x33\x3f\x59\x45\x03\xc3\xd0\xcb\x73\xbe\xfd\x17\x00\x00\xff\xff\xa9\xfc\xd1\xf9\xf6\x05\x00\x00")

func bindataTmpJsJsBytes() ([]byte, error) {
	return bindataRead(
		_bindataTmpJsJs,
		"bindata.tmp/js.js",
	)
}

func bindataTmpJsJs() (*asset, error) {
	bytes, err := bindataTmpJsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.tmp/js.js", size: 1526, mode: os.FileMode(420), modTime: time.Unix(1484621068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.tmp/index.html": bindataTmpIndexHtml,
	"bindata.tmp/js.js": bindataTmpJsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.tmp": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{bindataTmpIndexHtml, map[string]*bintree{}},
		"js.js": &bintree{bindataTmpJsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
