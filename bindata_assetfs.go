// Code generated by go-bindata.
// sources:
// bindata.tmp/index.html
// bindata.tmp/js.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTmpIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x4c\xc9\x4f\x2e\xa9\x2c\x48\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x36\x19\xa9\x89\x29\x60\x86\x3e\x9c\x95\x94\x9f\x52\x09\x11\x82\xb3\x8a\x93\x8b\x32\x0b\x4a\x14\x8a\x8b\x92\x6d\x95\xb2\x8a\xf5\xb2\x8a\x95\xec\x6c\xf4\x21\x82\x76\x5c\x36\xfa\x10\xd3\x00\x01\x00\x00\xff\xff\xa2\x91\x5b\x3f\x65\x00\x00\x00")

func bindataTmpIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTmpIndexHtml,
		"bindata.tmp/index.html",
	)
}

func bindataTmpIndexHtml() (*asset, error) {
	bytes, err := bindataTmpIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.tmp/index.html", size: 101, mode: os.FileMode(420), modTime: time.Unix(1484610120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataTmpJsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\xc1\x0a\x83\x30\x0c\x86\x5f\x45\x3d\x35\x10\x8a\x5e\x95\x3e\x89\x78\x10\x8d\x20\xb8\x54\xb2\x38\x06\xa1\xef\x3e\xca\x74\xee\xf6\xf1\x95\xef\x2f\x29\x97\x83\x27\x5d\x23\x3b\x01\xbb\xb8\x50\x17\xc1\xd6\xc5\x71\x1f\x07\x10\xd2\x43\xb8\xc8\xec\xe9\xbd\x47\xd1\x67\xf7\x1a\xa5\xa0\x90\x55\xb0\xd3\xb5\x96\x70\x9d\xdb\x88\x5b\x1c\x67\x9a\xdb\xb2\x49\xdd\x99\x4a\x4e\xa7\x71\xdb\x1c\x5d\x0b\x48\x78\xb3\x02\x92\xff\x66\xa1\xac\xef\x87\x94\xbf\xe1\x60\xbf\x21\xf5\x8f\x20\xa8\x7e\x0a\x8c\xea\xf7\x50\x55\xa8\xae\x86\xe4\xfa\xfb\x0c\x54\x64\x30\x76\x0d\x24\xfc\xb7\x60\x69\x80\xee\x13\x00\x00\xff\xff\xd2\x59\x05\xde\xf0\x00\x00\x00")

func bindataTmpJsJsBytes() ([]byte, error) {
	return bindataRead(
		_bindataTmpJsJs,
		"bindata.tmp/js.js",
	)
}

func bindataTmpJsJs() (*asset, error) {
	bytes, err := bindataTmpJsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.tmp/js.js", size: 240, mode: os.FileMode(420), modTime: time.Unix(1484617334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.tmp/index.html": bindataTmpIndexHtml,
	"bindata.tmp/js.js": bindataTmpJsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.tmp": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{bindataTmpIndexHtml, map[string]*bintree{}},
		"js.js": &bintree{bindataTmpJsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
